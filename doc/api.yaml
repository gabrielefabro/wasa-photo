openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment. 
  version: 1.0.0
tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "Profile"
    description: "Everything about your profile"
  - name: "Post"
    description: "Everything about your Posts"
components:
  schemas:
    Profile:
      title: Profile
      description: An object that rapresent a profile
      type: object
      properties: 
        user: { $ref: "#/components/schemas/User"}
        bio: { $ref: "#/components/schemas/Bio"}
        posts: { $ref: "#/components/schemas/Posts"}
        followings: { $ref: "#/components/schemas/Followings"}
        followers: { $ref: "#/components/schemas/Followers"}
        bans: { $ref: "#/components/schemas/Bans"}
        postCount:
          description: Amount of posted photos on your profile
          type: integer
          example: 5
          minimum: 0
        followingCount:
          description: The amount of person that you follow
          type: integer
          example: 200
          minimum: 0
        followerCount: 
          description: The amount of person that follow you
          type: integer
          example: 200
          minimum: 0
        banCount: 
          description: The amount of person that you blocked
          type: integer
          example: 11
          minimum: 0
    
    Post:
      title: Post
      description: An object that rapresent a post
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
        publicationTime: { $ref: "#/components/schemas/publicationTime"}
        bio: { $ref: "#/components/schemas/Bio"}
        likes: { $ref: "#/components/schemas/Likes"}
        likeCount:
          description: Il numero di like della foto
          type: integer
          example: 139495
          minimum: 0
        comments: { $ref: "#/components/schemas/Comments"}
        commentCount:
          description: The amount of comments on the post
          type: integer
          example: 139495
          minimum: 0
        photoURL: { $ref: "#/components/schemas/ImgURL" }

    Comment:
      title: Comment
      description: A comment under a post
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
        text:
          type: string
          example: "SUPER PHOTO!!"
          pattern: '^.{1,100}$'
        commentID: {$ref: "#/components/schemas/CommentID"}
        timeComment: 
          type: string
          format: date-time 
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
          minLength: 19
          maxLength: 19
        
    userName: 
      title: userName
      description: Profile's username, CAPS is not allowed
      type: string
      pattern: '^[a-z0-9._]{1,15}$'
      example: "gabrielefabro"
      minLength: 1
      maxLength: 15
    ID:
      title: ID
      description: ID of profile, each profile has an unic ID
      type: string
      pattern: '^[0-9]{5}$'
      example: "12345"
      minLength: 5
      maxLength: 5
    User: 
      title: User
      description: User
      type: object
      properties:
        ID: { $ref: "#/components/schemas/ID" }
        username: { $ref: "#/components/schemas/userName" }
    Bio:
          title: Bio
          description: Description of post or profile
          type: string
          example: "Questo Ã¨ il miglior profilo del mondo, SIUM!!"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
    CommentID:
      title: Comment ID 
      type: string
      description: Unic id of comment
      pattern: '^[0-9]{10}$'
      example: "0123456789"
      minLength: 10
      maxLength: 10
    postID: 
      title: PostID 
      description: unic ID for a post
      type: string
      pattern: '^[0-9]{5}[a-zA-Z]{3}$'
      example: "00010aAz"
      minLength: 8
      maxLength: 8
    Posts:
      title: Posts List
      description: List of posted photos
      type: array
      minItems: 0
      example: [oggettoFoto1, oggettoFoto2, oggettoFoto2]
      items: 
        $ref: "#/components/schemas/Post"
    Followings:
      title: Following List
      description: List of followings
      type: array
      minItems: 0
      example: [gabrielefabro, giuliaoros]
      items: 
        $ref: "#/components/schemas/User"
    Followers:
      title: Followers List
      description: List of followers
      type: array
      minItems: 0
      example: [gabrielefabro, giuliaoros]
      items: 
        $ref: "#/components/schemas/User"
    Bans:
      title: Banned List
      description: List of blocked usersstring
      type: array
      minItems: 0
      example: [gabrielefabro, giuliaoros]
      items: 
        $ref: "#/components/schemas/User"
    Authorization:
      title: Authorization
      description: The authorization code is the userID of the profile. 
      type: string
      pattern: "^[0-9]{5}$"
      example: "12345"
      minLength: 5
      maxLength: 5

    publicationTime: 
      title: Pubblication Time 
      type: string
      format: date-time
      pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
      minLength: 19
      maxLength: 19
    Likes:
      title: Like List
      description: The list of profiles that like your photo
      type: array
      minLength: 0
      example: [gabrielefabro, giuliaoros]
      items: 
        $ref: "#/components/schemas/User"

    Comments:
      title: Comments List
      description: The comments on your post
      type: array
      example: [gabrielefabro, giuliaoros]
      items: 
        $ref: "#/components/schemas/Comment"
    
    ImgURL:
      title: Img URL
      description: Image URL specification.
      type: string
      format: uri
      pattern: '^https:\/\/[a-zA-Z.-_\/]*\/users\/[0-9]{5}\/(propic|posts)\/[a-zA-Z]{3}\.jpg$'
      minLength: 34
      maxLength: 128
      example: "https://www.example.com/users/00001/posts/aAk.jpg"   
  responses:
    Unauthorized:
      description: The access token is missing or it's expired.
      content:
        text/plain:
          schema:
            type: string
            example: "Unauthorized"
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
      content:
        text/plain:
          schema:
            type: string
            example: "Bad Request"
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
      content:
        text/plain:
          schema:
            type: string
            example: "Internal Server Error"
    NotFound:
      description: The resource was not found.
      content:
        text/plain:
          schema:
            type: string
            example: "Not Found"
    Success:
      description: The resource is returned successfully
  securitySchemes:
    bearerAuth:    
      type: http
      scheme: bearer  
paths:
  /session:
    post:
      tags: 
        - "Login"
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The username of the user who wants to login
              type: object
              properties:
                username: { $ref: "#/components/schemas/userName" }
        required: true
      responses:
        "201":
          description: |
            A new account has been created.
          content:
            application/json:
              schema:
                description: The user authorization and the userID. Both strings are the same thing.
                type: object
                properties:
                  Authorization: { $ref: "#/components/schemas/Authorization" }
                  user: { $ref: "#/components/schemas/User" }
        "200":
          description: |
            Log-in succesfull.
          content:
            application/json:
              schema:
                description: The user authorization and the userID. Both strings are the same thing.
                type: object
                properties:
                  Authorization: { $ref: "#/components/schemas/Authorization" }
                  ID: { $ref: "#/components/schemas/ID" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{ID}:
    get:
      tags: 
        - "Profile"
      operationId: getUserProfile
      summary: Return a profile
      description: Return the profile with the user name and the ID passed as argoument
      parameters:
        - name: ID
          in: path
          required: true
          description: User that you want to search
          schema: { $ref: "#/components/schemas/ID"}
        - name: secondID
          in: path
          required: true
          description: ID of profile maybe blocked
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Profile returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilo: { $ref: "#/components/schemas/Profile"}
        "404": { $ref: "#/components/responses/NotFound"}
  /profiles/{ID}/username/{newUsername}:
    put:
      tags:
        - "Profile"
      operationId: setMyUserName
      summary: Change the user name on a profile
      description: change the username for a profile
      requestBody:
        content:
          string:
            schema: { $ref: "#/components/schemas/Profile" }
      parameters:
        - name: ID 
          in: path
          required: true
          description: The ID of the profile that want to change the userName
          schema: { $ref: "#/components/schemas/ID"}
        - name: newUsername
          in: path
          required: true
          description: The new userName
          schema: { $ref: "#/components/schemas/userName"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User name updated successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /feeds/{ID}: 
    get:
      tags:
        - "Profile"
      operationId: getMyStream
      summary: Return all the post of followed people
      description: Return all the post of followed people, take as argoument the ID of the profile
      parameters:
        - name: ID 
          in: path
          required: true
          description: ID of profile that asks the stream
          schema: { $ref: "#/components/schemas/ID"}
      security:
          - bearerAuth: [] 
      responses:
        "200": 
          description: Stream returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Posts"}
        "404": { $ref: "#/components/responses/NotFound"}
  /profiles/{ID}/followers:
    get:
      tags:
        - "Profile"
      operationId: getMyFollowers
      summary: Return the followers
      description: Return the following of the profile passed as argoument
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is returning his following
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Following returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followings"} 
  /profiles/{ID}/followings: 
    get:
      tags:
        - "Profile"
      operationId: getMyFollowings
      summary: Return the following
      description: Return the following of the profile passed as argoument
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is returning his following
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Following returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followings"}
  /profiles/{ID}/followings/{secondID}:
    put:
      tags:
        - "Profile"
      operationId: followUser
      summary: Follow a profile
      description: Follow a profile passed as parameter 
      requestBody:
        content:
          string:
            schema: { $ref: "#/components/schemas/ID" }
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is following someone
          schema: { $ref: "#/components/schemas/ID"}
        - name: secondID
          in: path
          required: true
          description: The ID of the profile that you want to follow 
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User followed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
    delete:
      tags:
       - "Profile"
      operationId: unfollowUser
      summary: Unfollow a profile
      description: Unfollow the profile passed as parameter 
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is unfollowing someone
          schema: { $ref: "#/components/schemas/ID"}
        - name: secondID
          in: path
          required: true
          description: The ID of the profile that you want to unfollow 
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User unfollowed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /profiles/{ID}/banned:
    get:
      tags:
        - "Profile"
      operationId: getMyBlocked
      summary: Return the blocked
      description: Return the blocked people of the profile passed as argoument
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is returning his blocked
          schema: { $ref: "#/components/schemas/ID"}
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Blocked returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Bans"}  
  /profiles/{ID}/banned/{secondID}:
    put:
      tags:
        - "Profile"
      operationId: banUser
      summary: Ban a profile
      description: Ban a profile passed as parameter 
      security:
        - bearerAuth: []      
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is blocking someone
          schema: { $ref: "#/components/schemas/ID"}
        - name: secondID
          in: path
          required: true
          description: The ID of the profile that you want to block  
          schema: { $ref: "#/components/schemas/ID"}
      responses:
        "200":
          description: User blocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
    delete:
      tags:
       - "Profile"
      operationId: unbanUser
      summary: Unban a profile
      description: Unban the profile passed as parameter 
      security:
        - bearerAuth: []      
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that is unblocking someone
          schema: { $ref: "#/components/schemas/ID"}
        - name: secondID
          in: path
          required: true
          description: The ID of the profile that you want to unblock  
          schema: { $ref: "#/components/schemas/ID"}
      responses:
        "200":
          description: User unblocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }            
  /profiles/{ID}/posts/{postID}/likeList:
    get:
      tags:
        - "Post"
      operationId: getLikes
      summary: Return the likes of the post
      description: Return the list of users who liked the post
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that you want to like a post
          schema: { $ref: "#/components/schemas/ID"}
        - name: Post
          in: query
          required: true
          description: The post that you like
          schema: { $ref: "#/components/schemas/Post"}
      security:
        - bearerAuth: []  
      responses:
        "200":
          description: Post liked successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  likes: { $ref: "#/components/schemas/Likes"}
  /profiles/{ID}/posts/{postID}/likeList/{secondID}:
    put:
      tags:
        - "Post"
      operationId: likePhoto
      summary: Like a photo
      description: Put a like on a post on your stream, on a profile searched 
      security:
        - bearerAuth: []      
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that you want to like a post
          schema: { $ref: "#/components/schemas/ID"}
        - name: Post
          in: query
          required: true
          description: The post that you like
          schema: { $ref: "#/components/schemas/Post"} 
        - name: secondID  
          in: path
          required: true
          description: The profile that need to be added at the list
          schema: { $ref: "#/components/schemas/User"} 
      responses:
        "200":
          description: Post liked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }            
    delete:
      tags:
       - "Post"
      operationId: unlikePost
      summary: Unlike a photo
      description: Unlike the post passed as parameter 
      security:
        - bearerAuth: []      
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that you want to like a post
          schema: { $ref: "#/components/schemas/ID"}
        - name: Post
          in: query
          required: true
          description: The post that you like
          schema: { $ref: "#/components/schemas/Post"} 
        - name: user  
          in: path
          required: true
          description: The profile that need to be added at the list
          schema: { $ref: "#/components/schemas/User"}
      responses:
        "200":
          description: Post unliked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /profiles/{ID}/posts/{postID}:
    get:
      tags:
        - "Post"
      operationId: getPosts
      summary: return a post
      description: Return the post selected from postID
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the profile that you want to see
          schema: { $ref: "#/components/schemas/ID"}
        - name: postID
          in: path
          required: true
          description: The ID of the post that you want to see
          schema: { $ref: "#/components/schemas/postID"}
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Post returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post"}
    delete:
      tags:
        - "Post"
      operationId: deletePhoto
      summary: Delete a photo froma a profile
      description: Delete a photo from your stream
      parameters:
        - name: ID 
          in: path
          required: true
          description: The ID of the profile that you want to delete
          schema: { $ref: "#/components/schemas/ID"}
        - name: postID
          in: path
          required: true
          description: The ID of the post that you want to delete
          schema: { $ref: "#/components/schemas/postID"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }  
  /profiles/{profileID}/posts{URL}:
    post: 
      tags:
        - "Post"
      operationId: uploadPhoto
      summary: Add a photo on the profile
      description: Add a photo on your stream 
      parameters:
        - name: profileID
          in: path
          required: true
          description: The ID of the profile that you want to see
          schema: { $ref: "#/components/schemas/ID"}
        - name: URL 
          in: path
          required: true
          description: The url of the picture of the post
          schema: { $ref: "#/components/schemas/ImgURL"}
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: The photo to upload and the caption of the post.
              type: object
              properties:
                caption:
                  description: The caption of the post 
                  type: string
                  pattern: "^[^\/\\]{1,100}$"
                  example: "A simple nice photo"
                  minLength: 1
                  maxLength: 64
                file:
                  description: The photo to upload
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 1000000
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Photo added successfully
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "404":
          description: The link or the userName aren't found on the server
  /profiles/{profileID}/posts/{postID}/comments:
    get:
      tags:
        - "Post"
      operationId: getComments
      summary: return Comments
      description: Return the comments from a post
      parameters:
        - name: profileID
          in: path
          required: true
          description: The ID of the profile that you want to see
          schema: { $ref: "#/components/schemas/ID"}
        - name: postID
          in: path
          required: true
          description: The ID of the post that you want to see
          schema: { $ref: "#/components/schemas/postID"}
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Comments returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comments"}  
    post: 
      tags:
        - "Post"
      operationId: commentPhoto
      summary: Add a comment on the post
      description: Add a comment on your stream 
      parameters:
        - name: profileID
          in: path
          required: true
          description: The ID of the profile that you want to see
          schema: { $ref: "#/components/schemas/ID"}
        - name: postID
          in: path
          required: true
          description: The ID of the post that you want to see
          schema: { $ref: "#/components/schemas/postID"}
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Photo added successfully
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success"}
        "404":
          description: The link or the userName aren't found on the server
  /profiles/{profileID}/posts/{postID}/comments/{commentID}:
    delete:
      tags:
        - "Post"
      operationId: uncommentPhoto
      summary: Delete a comment froma a profile
      description: Delete a comment from the post
      parameters:
        - name: profileID
          in: path
          required: true
          description: The ID of the profile that you want to delete
          schema: { $ref: "#/components/schemas/ID"}
        - name: postID
          in: path
          required: true
          description: The ID of the post that you want to delete
          schema: { $ref: "#/components/schemas/postID"}
        - name: commentID 
          in: path
          required: true
          description: The ID of the comment that you want to delete
          schema: { $ref: "#/components/schemas/CommentID"}
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Comment deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }