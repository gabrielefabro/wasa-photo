openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: |-
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment.
  version: 1.0.0

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "Profile"
    description: "Everything about your profile"
  - name: "Post"
    description: "Everything about your Posts"
components:
  schemas:
    Profile:
      title: Profile
      description: An object that rapresent a profile
      type: object
      properties: 
        user: { $ref: "#/components/schemas/User"}
        bio: { $ref: "#/components/schemas/Bio"}
        posts: { $ref: "#/components/schemas/Posts"}
        followers: { $ref: "#/components/schemas/UsersList"}
        followings: { $ref: "#/components/schemas/UsersList"}
    Post:
      title: Post
      description: An object that rapresent a post
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
        publication_time: { $ref: "#/components/schemas/PublicationTime"}
        bio: { $ref: "#/components/schemas/Bio"}
        photo_url: { $ref: "#/components/schemas/Photo" }
    Comment:
      title: Comment
      description: A comment under a post
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
        text:
          description: text of comment
          type: string
          example: "SUPER PHOTO!!"
          pattern: '^.{1,50}$'
        comment_id: {$ref: "#/components/schemas/CommentId"}     
    User: 
      title: User
      description: User
      type: object
      properties:
        id: { $ref: "#/components/schemas/UserId" }
        username: { $ref: "#/components/schemas/UserName" }    
    UsersList:
      title: Users List
      description: A list of users for many responses.
      type: array
      items:
        $ref: "#/components/schemas/User"
      minItems: 0
      maxItems: 10
    CommentList:
      title: Comment List
      description: A list of comments
      type: array
      items:
        $ref: "#/components/schemas/Comment"
      minItems: 0
      maxItems: 10
    PostList:
      title: Post List
      description: A list of posts
      type: array
      items:
        $ref: "#/components/schemas/Post"
      minItems: 0
      maxItems: 10
    UserName: 
      title: userName
      description: Profile's username, CAPS is not allowed
      type: string
      pattern: '^[a-z0-9._]{1,15}$'
      example: "gabrielefabro"
      minLength: 1
      maxLength: 15
    UserId:
      title: User Id
      description: ID of profile, each profile has an unic ID
      type: string
      pattern: '^[0-9]{8}$'
      example: "12345"
      minLength: 5
      maxLength: 5
    Bio:
      title: Bio
      description: Description of post or profile
      type: string
      example: "Questo Ã¨ il miglior profilo del mondo, SIUM!!"
      pattern: '^[^\/\\]{1,64}$'
      minLength: 1
      maxLength: 64
    CommentId:
      title: Comment ID 
      description: Any number between 0-9999
      type: integer
      format: int64
      minimum: 0
      maximum: 9999
      readOnly: true
      example: "965"
      pattern: '^[0-9]{4}'
    PostId: 
      title: PostID 
      description: unic ID for a post
      type: string
      pattern: '^[0-9]{8}'
      example: "12345678"
      minLength: 8
      maxLength: 8
    Posts:
      title: Posts List
      description: List of posts
      type: object
      properties:
        postlist: { $ref: "#/components/schemas/PostList" }
    Followings:
      title: Following List
      description: List of followings
      type: object
      properties: 
        followings: {  $ref: "#/components/schemas/UsersList"  }
    Followers:
      title: Followers List
      description: List of followers
      type: object
      properties: 
        followers: {  $ref: "#/components/schemas/UsersList"  }
    Bans:
      title: Banned List
      description: List of blocked usersstring
      type: object
      properties: 
        bans: {  $ref: "#/components/schemas/UsersList"  }
    Authorization:
      title: Authorization
      description: The authorization code is the user_id.
      type: string
      pattern: "^[0-9]{5}$"
      example: "00010"
      minLength: 5
      maxLength: 5
    AuthorizationUser:
      title: AuthotizationUser
      description: The authorization code is the user_id.
      type: object
      properties:
        id: { $ref: "#/components/schemas/UserId" }
        auth: { $ref: "#/components/schemas/Authorization" }
    PublicationTime: 
      title: Pubblication Time 
      description: Publication time of post or somenthing similar
      type: string
      format: date-time
      pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
      minLength: 19
      maxLength: 19
    Likes:
      title: Like List
      description: The list of profiles that like your photo
      type: object
      properties: 
        likes: {  $ref: "#/components/schemas/UsersList"  }
    Comments:
      title: Comments List
      description: The comments on your post
      type: object
      properties: 
        comments: {  $ref: "#/components/schemas/CommentList"  } 
    Photo:
      description: "Raw data of the photo"
      type: string
      minLength: 0
      maxLength: 100
      format: binary
      example: "010110010"
    Success:
      title: Success
      description: The resource is returned successfully
      type: string
      example: "returned successfully"
    Session:
      title: Success
      description: Security schema 
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
  securitySchemes:
    bearerAuth:    
      type: http
      scheme: Bearer  


paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Session"
        required: true
      responses:
        "201":
          description: |-
            A new account has been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthorizationUser" }
  /profiles/{id}:
    parameters:
      - name: id
        in: path
        description: User that you want to search
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getUserProfile
      summary: Return a profile
      description: Return the profile with the user name and the ID passed as argoument
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Profile returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
    put:
      tags: ["Profile"]
      operationId: setMyUserName
      summary: Change the user name on a profile
      description: change the username for a profile
      security:
        - bearerAuth: [] 
      requestBody:
        description: New username to set.
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/User"
        required: true     
      responses:
        "200":
          description: User name updated successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
  /profiles/{id}/home: 
    parameters:
      - name: id
        in: path
        description: ID of profile that asks the stream
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getMyStream
      summary: Return all the post of followed people
      description: Return all the post of followed people, take as argoument the ID of the profile
      security:
          - bearerAuth: [] 
      responses:
        "200": 
          description: Stream returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Posts"}
  /profiles/{id}/followings/{following_id}:
    parameters:
      - name: id
        in: path
        description: The ID of the profile that (un)followed someone
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: following_id
        in: path
        description: The ID of the profile that you want to (un)follow 
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    put: 
      tags: ["Profile"]
      operationId: followUser
      summary: Follow a profile
      description: Follow a profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User followed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
    delete:
      tags: ["Profile"]
      operationId: unfollowUser
      summary: Unfollow a profile
      description: Unfollow the profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User unfollowed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
  /profiles/{id}/bans/{banned_id}:
    parameters:
      - name: id
        in: path
        description: The ID of the profile that is (un)blocking someone
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: banned_id
        in: path
        description: The ID of the profile that you want to (un)block  
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    put:
      tags: ["Profile"]
      operationId: banUser
      summary: Ban a profile
      description: Ban a profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User blocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
    delete:
      tags: ["Profile"]
      operationId: unbanUser
      summary: Unban a profile
      description: Unban the profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User unblocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }            
  /profiles/{id}/posts/{post_id}/likes/{like_id}:
    parameters:
      - name: id
        in: path
        description: The ID of the profile that you want to (un)like a post
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_id
        in: path
        description: The post that you (un)like
        schema: { $ref: "#/components/schemas/Post"} 
        required: true
      - name: like_id 
        in: path
        description: The profile that need to be added at the list
        schema: { $ref: "#/components/schemas/User"} 
        required: true
    put:
      tags: ["Post"]
      operationId: likePhoto
      summary: Like a photo
      description: Put a like on a post on your stream, on a profile searched 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post liked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }            
    delete:
      tags: ["Post"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: Unlike the post passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post unliked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
  /profiles/{profile_id}/posts/{post_id}:
    parameters:
      - name: profile_id
        in: path
        description: The ID of the profile that you want to see
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_id
        in: path
        description: The ID of the post that you want to see
        schema: { $ref: "#/components/schemas/PostId"}
        required: true
    get:
      tags: ["Post"]
      operationId: getPosts
      summary: return a post
      description: Return the post selected from post_ID
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Post returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post"}
    delete:
      tags: ["Post"]
      operationId: deletePhoto
      summary: Delete a photo froma a profile
      description: Delete a photo from your stream
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }  
  /profiles/{id}/posts:
    parameters:
      - name: id
        in: path
        description: The ID of the profile that upload a photo
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    post: 
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Add a photo on the profile
      description: Add a photo on your stream 
      security:
        - bearerAuth: []
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/Photo"
            example:
              photo_data: "010110010"
        required: true
      responses:
        "201":
          description: Photo added successfully
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }
  /profiles/{id}/posts/{post_id}/comments:
    parameters:
      - name: id
        in: path
        description: The ID of the profile that you want to see the comments
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_id
        in: path
        description: The ID of the post that you want to see the comments
        schema: { $ref: "#/components/schemas/PostId"}
        required: true
    post: 
      tags: ["Post"]
      operationId: commentPhoto
      summary: Add a comment on the post
      description: Add a comment on your stream 
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Success"}
  /profiles/{id}/posts/{post_id}/comments/{comment_id}:
    parameters:
        - name: id
          in: path
          description: The ID of the profile from you want to post/delete a comment
          schema: { $ref: "#/components/schemas/UserId"}
          required: true
        - name: post_id
          in: path
          description: The ID of the post from you want to post/delete a comment
          schema: { $ref: "#/components/schemas/PostId"}
          required: true
        - name: comment_id
          in: path
          description: The ID of the comment you want to delete
          schema: { $ref: "#/components/schemas/CommentId"}
          
          required: true
    delete:
      tags: ["Post"]
      operationId: uncommentPhoto
      summary: Delete a comment froma a profile
      description: Delete a comment from the post
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Comment deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/schemas/Success" }