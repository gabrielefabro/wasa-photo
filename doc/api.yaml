openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: |-
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment.

  version: 1.0.0

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "Profile"
    description: "Everything about your profile"
  - name: "Post"
    description: "Everything about your Posts"
components:
  schemas:
    Profile:
      title: Profile
      description: An object that rapresent a profile
      type: object
      properties: 
        User: { $ref: "#/components/schemas/User"}
        Bio: { $ref: "#/components/schemas/Bio"}
        Posts: { $ref: "#/components/schemas/Posts"}
        PostCount:
          description: Amount of posted photos on your profile
          type: integer
          example: 5
          minimum: 0
        FollowingCount:
          description: The amount of person that you follow
          type: integer
          example: 200
          minimum: 0
        FollowerCount: 
          description: The amount of person that follow you
          type: integer
          example: 200
          minimum: 0
    Post:
      title: Post
      description: An object that rapresent a post
      type: object
      properties:
        User: { $ref: "#/components/schemas/User"}
        PublicationTime: { $ref: "#/components/schemas/PublicationTime"}
        Bio: { $ref: "#/components/schemas/Bio"}
        LikeCount:
          description: Il numero di like della foto
          type: integer
          example: 139495
          minimum: 0
        CommentCount:
          description: The amount of comments on the post
          type: integer
          example: 139495
          minimum: 0
        PhotoURL: { $ref: "#/components/schemas/ImgUrl" }
    Comment:
      title: Comment
      description: A comment under a post
      type: object
      properties:
        User: { $ref: "#/components/schemas/User"}
        Text:
          description: text of comment
          type: string
          example: "SUPER PHOTO!!"
          pattern: '^.{1,100}$'
        CommentId: {$ref: "#/components/schemas/CommentId"}
        TimeComment:
          description: time of comment
          type: string
          format: date-time 
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
          minLength: 19
          maxLength: 19     
    UsersList:
      title: Users List
      description: A list of users for many responses.
      type: array
      items:
        type: object
        description: User
        properties:
          user: { $ref: "#/components/schemas/User" }
      minItems: 0
      maxItems: 100
    LikeList:
      title: Like List
      description: A list of like
      type: array
      items:
        type: object
        description: User
        properties:
          user: { $ref: "#/components/schemas/User" }
      minItems: 0
      maxItems: 99999999999999999999999
    CommentList:
      title: Comment List
      description: A list of comments
      type: array
      items:
        type: object
        description: Comment
        properties:
          user: { $ref: "#/components/schemas/Comment" }
      minItems: 0
      maxItems: 500
    UserName: 
      title: userName
      description: Profile's username, CAPS is not allowed
      type: string
      pattern: '^[a-z0-9._]{1,15}$'
      example: "gabrielefabro"
      minLength: 1
      maxLength: 15
    UserId:
      title: User Id
      description: ID of profile, each profile has an unic ID
      type: string
      pattern: '^[0-9]{5}$'
      example: "12345"
      minLength: 5
      maxLength: 5
    User: 
      title: User
      description: User
      type: object
      properties:
        ID: { $ref: "#/components/schemas/UserId" }
        username: { $ref: "#/components/schemas/UserName" }
    Bio:
          title: Bio
          description: Description of post or profile
          type: string
          example: "Questo Ã¨ il miglior profilo del mondo, SIUM!!"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
    CommentId:
      title: Comment ID 
      type: string
      description: Unic id of comment
      pattern: '^[0-9]{10}$'
      example: "0123456789"
      minLength: 10
      maxLength: 10
    PostId: 
      title: PostID 
      description: unic ID for a post
      type: string
      pattern: '^[0-9]{5}[a-zA-Z]{3}$'
      example: "00010aAz"
      minLength: 8
      maxLength: 8
    Posts:
      title: Posts List
      description: List of posts
      type: object
      items: { $ref: "#/components/schemas/Post" }
    Followings:
      title: Following List
      description: List of followings
      type: object
      items: 
        $ref: "#/components/schemas/UsersList"
    Followers:
      title: Followers List
      description: List of followers
      type: object
      items: 
        $ref: "#/components/schemas/UsersList"
    Bans:
      title: Banned List
      description: List of blocked usersstring
      type: object
      items: 
        $ref: "#/components/schemas/UsersList"
    Authorization:
      title: Authorization
      description: The authorization code is the user_id.
      type: string
      pattern: "^[0-9]{5}$"
      example: "00010"
      minLength: 5
      maxLength: 5
    AuthorizationUser:
      title: AuthotizationUser
      description: The authorization code is the user_id.
      type: object
      properties:
        user_id: { $ref: "#/components/schemas/UserId" }
        auth: { $ref: "#/components/schemas/Authorization" }
    PublicationTime: 
      title: Pubblication Time 
      type: string
      format: date-time
      pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
      minLength: 19
      maxLength: 19
    Likes:
      title: Like List
      description: The list of profiles that like your photo
      type: object
      items: 
        $ref: "#/components/schemas/UsersList"
    Comments:
      title: Comments List
      description: The comments on your post
      type: object
      items: 
        $ref: "#/components/schemas/CommentList" 
    ImgUrl:
      title: Img Url
      description: Image URL specification.
      type: string
      format: url
      pattern: '^https:\/\/[a-zA-Z.-_\/]*\/users\/[0-9]{5}\/(propic|posts)\/[a-zA-Z]{3}\.jpg$'
      minLength: 34
      maxLength: 128
      example: "https://www.example.com/users/00001/posts/aAk.jpg"   
  responses:
    Unauthorized:
      description: The access token is missing or it's expired.
      content:
        text/plain:
          schema:
            type: string
            example: "Unauthorized"
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
      content:
        text/plain:
          schema:
            type: string
            example: "Bad Request"
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
      content:
        text/plain:
          schema:
            type: string
            example: "Internal Server Error"
    NotFound:
      description: The resource was not found.
      content:
        text/plain:
          schema:
            type: string
            example: "Not Found"
    Success:
      description: The resource is returned successfully
  securitySchemes:
    bearerAuth:    
      type: http
      scheme: Bearer  
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The username of the user who wants to login
              type: object
              properties:
                UserName: { $ref: "#/components/schemas/UserName" }
        required: true
      responses:
        "201":
          description: |-
            A new account has been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthorizationUser" }
        "200":
          description: |-
            Log-in succesfull.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthorizationUser" }
  /profiles/{profile_ID}:
    parameters:
      - name: profile_ID
        in: path
        description: User that you want to search
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getUserProfile
      summary: Return a profile
      description: Return the profile with the user name and the ID passed as argoument
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Profile returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        "404": { $ref: "#/components/responses/NotFound"}
  /profiles/{profile_ID}/username:
    parameters:
      - name: profile_ID 
        in: path
        description: The ID of the profile that want to change the userName
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    put:
      tags: ["Profile"]
      operationId: setMyUserName
      summary: Change the user name on a profile
      description: change the username for a profile
      security:
        - bearerAuth: [] 
      requestBody:
        description: New username to set.
        content:
          application/json:
            schema:
              description: The new username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/UserName" }
        required: true     
      responses:
        "200":
          description: User name updated successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /feeds/{profile_ID}: 
    parameters:
      - name: profile_ID 
        in: path
        description: ID of profile that asks the stream
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getMyStream
      summary: Return all the post of followed people
      description: Return all the post of followed people, take as argoument the ID of the profile
      security:
          - bearerAuth: [] 
      responses:
        "200": 
          description: Stream returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Posts"}
        "404": { $ref: "#/components/responses/NotFound"}
  /profiles/{profile_ID}/followers:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that is returning his followers
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getMyFollowers
      summary: Return the followers
      description: Return the followers of the profile passed as argoument
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Followers returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followers"} 
  /profiles/{profile_ID}/followings: 
    parameters:
        - name: profile_ID
          in: path
          description: The ID of the profile that is returning his followings
          schema: { $ref: "#/components/schemas/UserId"}
          required: true
    get:
      tags: ["Profile"]
      operationId: getMyFollowings
      summary: Return the following
      description: Return the followings of the profile passed as argoument
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Following returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followings"}
  /profiles/{profile_ID}/followings/{second_profile_ID}:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that (un)followed someone
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: second_profile_ID
        in: path
        description: The ID of the profile that you want to (un)follow 
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    put: 
      tags: ["Profile"]
      operationId: followUser
      summary: Follow a profile
      description: Follow a profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User followed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
    delete:
      tags: ["Profile"]
      operationId: unfollowUser
      summary: Unfollow a profile
      description: Unfollow the profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User unfollowed successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /profiles/{profile_ID}/bans:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that is returning his bans 
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getMyBans
      summary: Return the people banned 
      description: Return the banned people of the id profile passed as argoument
      security:
        - bearerAuth: []
      responses:
        "200": 
          description: Bans returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Bans"}  
  /profiles/{profile_ID}/bans/{second_profile_ID}:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that is (un)blocking someone
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: second_profile_ID
        in: path
        description: The ID of the profile that you want to (un)block  
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    put:
      tags: ["Profile"]
      operationId: banUser
      summary: Ban a profile
      description: Ban a profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User blocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
    delete:
      tags: ["Profile"]
      operationId: unbanUser
      summary: Unban a profile
      description: Unban the profile passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: User unblocked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }            
  /profiles/{profile_ID}/posts/{post_ID}/likes:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that you want to like a post
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_ID
        in: path
        description: The post that you like
        schema: { $ref: "#/components/schemas/Post"}
        required: true
    get:
      tags: ["Profile"]
      operationId: getLikes
      summary: Return the likes of the post
      description: Return the list of users who liked the post
      security:
        - bearerAuth: []  
      responses:
        "200":
          description: Get the list of users who liked the post
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Likes" }
  /profiles/{profile_ID}/posts/{post_ID}/likeList/{second_profile_ID}:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that you want to (un)like a post
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_ID
        in: path
        description: The post that you (un)like
        schema: { $ref: "#/components/schemas/Post"} 
        required: true
      - name: second_profile_ID  
        in: path
        description: The profile that need to be added at the list
        schema: { $ref: "#/components/schemas/User"} 
        required: true
    put:
      tags: ["Post"]
      operationId: likePhoto
      summary: Like a photo
      description: Put a like on a post on your stream, on a profile searched 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post liked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }            
    delete:
      tags: ["Post"]
      operationId: unlikePost
      summary: Unlike a photo
      description: Unlike the post passed as parameter 
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post unliked successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
  /profiles/{profile_ID}/posts/{post_ID}:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that you want to see
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_ID
        in: path
        description: The ID of the post that you want to see
        schema: { $ref: "#/components/schemas/PostId"}
        required: true
    get:
      tags: ["Post"]
      operationId: getPosts
      summary: return a post
      description: Return the post selected from post_ID
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Post returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post"}
    delete:
      tags: ["Post"]
      operationId: deletePhoto
      summary: Delete a photo froma a profile
      description: Delete a photo from your stream
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Post deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }  
  /profiles/{profile_ID}/posts:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that you want to see
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
    post: 
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Add a photo on the profile
      description: Add a photo on your stream 
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: The photo that would be uploaded and the description of the post.
              type: object
              properties:
                caption:
                  description: The description of the post 
                  type: string
                  pattern: ^[^\\]{1,100}$
                  example: "A simple nice photo"
                  minLength: 1
                  maxLength: 100
                photo:
                  description: The photo to upload
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 1000000     
      responses:
        "201":
          description: Photo added successfully
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "404":
          description: The link or the userName aren't found on the server
  /profiles/{profile_ID}/posts/{post_ID}/comments:
    parameters:
      - name: profile_ID
        in: path
        description: The ID of the profile that you want to see the comments
        schema: { $ref: "#/components/schemas/UserId"}
        required: true
      - name: post_ID
        in: path
        description: The ID of the post that you want to see the comments
        schema: { $ref: "#/components/schemas/PostId"}
        required: true
    get:
      tags: ["Post"]
      operationId: getComments
      summary: return Comments
      description: Return the comments from a post
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Comments returned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comments"}    
    post: 
      tags: ["Post"]
      operationId: commentPhoto
      summary: Add a comment on the post
      description: Add a comment on your stream 
      security:
        - bearerAuth: []      
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success"}
        "404":
          description: The post_ID or the profile_ID aren't found on the server
  /profiles/{profile_ID}/posts/{post_ID}/comments/{comment_ID}:
    parameters:
        - name: profile_ID
          in: path
          description: The ID of the profile from you want to post/delete a comment
          schema: { $ref: "#/components/schemas/UserId"}
          required: true
        - name: post_ID
          in: path
          description: The ID of the post from you want to post/delete a comment
          schema: { $ref: "#/components/schemas/PostId"}
          required: true
        - name: comment_ID 
          in: path
          description: The ID of the comment you want to post/delete
          schema: { $ref: "#/components/schemas/CommentId"}
          
          required: true
    delete:
      tags: ["Post"]
      operationId: uncommentPhoto
      summary: Delete a comment froma a profile
      description: Delete a comment from the post
      security:
        - bearerAuth: []      
      responses:
        "200":
          description: Comment deleted successfully
          content:  
            text/plain:
              schema: { $ref: "#/components/responses/Success" }